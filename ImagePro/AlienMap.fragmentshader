#version 330 core

in vec2 fragTexCoord; // Texture coordinates passed from vertex shader
out vec4 fragColor;   // Final color output

uniform sampler2D inputTexture;   // The input image as a texture
uniform vec3 freq;                // Frequency for the transformation
uniform vec3 phaseshift;          // Phase shift for the transformation
uniform vec3 keep;                // The "keep" vector
uniform vec3 unit;                // Unit vector, usually (1.0, 1.0, 1.0)

uniform vec3 colorTint;

// A function to perform the transformation, similar to your CPU algorithm
vec3 transform(vec3 in_v) {
    vec3 inner = (in_v * 2.0) - unit;
    vec3 withFreq = inner * freq;
    vec3 withPhase = withFreq + phaseshift;
    vec3 sinResult = sin(withPhase);
    return (unit + sinResult) * 0.5;
}


void main() {
    // Fetch the color of the current pixel from the input texture
    vec4 in_v = texture(inputTexture, fragTexCoord);

    // Apply the transformation to the RGB components
    vec3 transformed = transform(in_v.rgb);
    //fragColor = vec4(transformed, in_v.a); // Preserve the alpha channel (in_v.a)

    // Select between the original or transformed value based on 'keep' parameter
    vec3 outputColor;// = mix(in_v.rgb, transformed, keep);
    outputColor.r = (keep.r > 0) ? transformed.r : in_v.r;
    outputColor.g = (keep.g > 0) ? transformed.g : in_v.g;
    outputColor.b = (keep.b > 0) ? transformed.b : in_v.b;

    // Set the final color (output is RGBA)
    fragColor = vec4(outputColor, in_v.a); // Preserve the alpha channel (in_v.a)

}
